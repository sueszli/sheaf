import platform
import subprocess
from SCons.Script import ARGUMENTS, Environment, Exit

env = Environment()
env.Tool('compilation_db')
env.CompilationDatabase()

#
# arguments
#

valgrind_mode = ARGUMENTS.get('VALGRIND', 0)

# 
# compiler config
# 

version_output = subprocess.check_output([env['CC'], '--version'], universal_newlines=True)
if 'clang' in version_output.lower():
    compiler_name = 'clang'
elif 'gcc' in version_output.lower():
    compiler_name = 'gcc'
else:
    Exit("unsupported compiler")

env.Append(CFLAGS=['-std=c23'])

if valgrind_mode:
    # valgrind mode: no optimization, no sanitizers
    env.Append(CFLAGS=['-g', '-O0'])
else:
    # normal mode: optimization + multiple sanitizers
    env.Append(CFLAGS=['-g', '-O3'])
    env.Append(CFLAGS=['-fsanitize=address'])
    env.Append(LINKFLAGS=['-fsanitize=address'])
    env.Append(CFLAGS=['-fsanitize=undefined'])
    env.Append(LINKFLAGS=['-fsanitize=undefined'])
    env.Append(CFLAGS=['-fstack-protector-strong'])
    env.Append(CFLAGS=['-U_FORTIFY_SOURCE', '-D_FORTIFY_SOURCE=2'])
    if platform.system() == 'Darwin': # weird quirk
        env.Append(ENV={'MallocNanoZone': '0'})

env.Append(CFLAGS=[
    '-Wall', '-Wextra', '-Wcast-qual','-Wdisabled-optimization','-Wformat=2','-Winit-self','-Wmissing-include-dirs','-Wredundant-decls','-Wstrict-overflow=5','-Wundef','-Wuninitialized','-Wwrite-strings','-Wpointer-arith','-Wstrict-prototypes','-Wconversion','-Wsign-conversion','-Wbad-function-cast','-Wold-style-definition','-Wempty-body','-Wtype-limits','-Wunused-but-set-parameter','-Wunused-but-set-variable','-Wstack-protector','-fstack-protector-strong','-fno-common','-Wformat-security','-Wno-implicit-function-declaration'
])

if compiler_name == 'gcc':
    env.Append(CFLAGS=['-Wlogical-op', '-Wjump-misses-init', '-Wmissing-parameter-type', '-Wclobbered', '-Wmaybe-uninitialized', '-Wduplicated-cond', '-Wduplicated-branches', '-Wnull-dereference', '-Walloc-zero', '-Walloca', '-Wstringop-overflow=4', '-Warray-bounds=2'])

if compiler_name == 'clang':
    env.Append(CFLAGS=['-Wcomma','-Wloop-analysis','-Wshift-sign-overflow','-Wconditional-uninitialized','-Wdocumentation'])

# 
# build targets
# 

binary = env.Program('binary', 'src/main.c')

#
# execution
#

if valgrind_mode and platform.system() == 'Darwin':
    leaks_run = env.Command('valgrind', binary, 'MallocStackLogging=1 leaks --atExit -- ./$SOURCE')
elif valgrind_mode and platform.system() == 'Linux':
    valgrind_run = env.Command('valgrind', binary, 'valgrind --tool=memcheck --leak-check=full --show-leak-kinds=all --track-origins=yes --log-file=valgrind.log $SOURCE')
else:
    run_binary = env.Command('run', binary, './$SOURCE')
