import platform
import subprocess
import os
from SCons.Script import ARGUMENTS, COMMAND_LINE_TARGETS, Environment, Exit, Glob

env = Environment()
env.Tool('compilation_db')
env.CompilationDatabase()

# 
# compiler config
# 

if 'CC' not in env:
    detected_cc = env.Detect(['clang', 'gcc'])
    if not detected_cc:
        Exit("No supported compiler (clang/gcc) detected")
    env['CC'] = detected_cc

version_output = subprocess.check_output([env['CC'], '--version'], universal_newlines=True)
if 'clang' in version_output.lower():
    compiler_name = 'clang'
elif 'gcc' in version_output.lower():
    compiler_name = 'gcc'
else:
    Exit("unsupported compiler")

env.Append(CFLAGS=['-std=gnu11'])
env.Append(LIBS=['pthread'])

if not 'valgrind' in COMMAND_LINE_TARGETS:
    env.Append(CFLAGS=['-g', '-O3'])
    env.Append(CFLAGS=['-fsanitize=address'])
    env.Append(LINKFLAGS=['-fsanitize=address'])
    env.Append(CFLAGS=['-fsanitize=undefined'])
    env.Append(LINKFLAGS=['-fsanitize=undefined'])
    env.Append(CFLAGS=['-fstack-protector-strong'])
    env.Append(CFLAGS=['-U_FORTIFY_SOURCE', '-D_FORTIFY_SOURCE=2'])
    if platform.system() == 'Darwin': # weird quirk
        env.Append(ENV={'MallocNanoZone': '0'})

env.Append(CFLAGS=[
    '-Wall', '-Wextra', '-Wcast-qual','-Wdisabled-optimization','-Wformat=2','-Winit-self','-Wmissing-include-dirs','-Wredundant-decls','-Wstrict-overflow=5','-Wundef','-Wuninitialized','-Wwrite-strings','-Wpointer-arith','-Wstrict-prototypes','-Wconversion','-Wsign-conversion','-Wbad-function-cast','-Wold-style-definition','-Wempty-body','-Wtype-limits','-Wunused-but-set-parameter','-Wunused-but-set-variable','-Wstack-protector','-fstack-protector-strong','-fno-common','-Wformat-security','-Wno-implicit-function-declaration'
])

if compiler_name == 'gcc':
    env.Append(CFLAGS=['-Wlogical-op', '-Wjump-misses-init', '-Wmissing-parameter-type', '-Wclobbered', '-Wmaybe-uninitialized', '-Wduplicated-cond', '-Wduplicated-branches', '-Wnull-dereference', '-Walloc-zero', '-Walloca', '-Wstringop-overflow=4', '-Warray-bounds=2'])

if compiler_name == 'clang':
    env.Append(CFLAGS=['-Wcomma','-Wloop-analysis','-Wshift-sign-overflow','-Wconditional-uninitialized','-Wdocumentation'])

# 
# dependencies
# 

unity_dir = 'unity'
if not os.path.exists(unity_dir):
    unity_repo = 'https://github.com/ThrowTheSwitch/Unity.git'
    unity_tag = 'v2.6.1'
    subprocess.run(['git', 'clone', '--branch', unity_tag, '--depth', '1', unity_repo, unity_dir], check=True)
unity_src = os.path.join(unity_dir, 'src')
env.Append(CPPPATH=[unity_src])

# 
# source
# 

binary = env.Program('sheaf', 'src/main.c')

src_files = [f for f in Glob('src/*.c') if not str(f).endswith('main.c')]
test_sources = Glob('tests/*.c')
test_programs = [
    env.Program(f'tests/{os.path.splitext(os.path.basename(str(tsrc)))[0]}', [tsrc] + src_files + [os.path.join(unity_src, 'unity.c')])
    for tsrc in test_sources
]

#
# commands
#

# valgrind
if platform.system() == 'Darwin':
    leaks_run = env.Command('valgrind', binary, 'MallocStackLogging=1 leaks --atExit -- ./$SOURCE')
if platform.system() == 'Linux':
    valgrind_run = env.Command('valgrind', binary, 'valgrind --tool=memcheck --leak-check=full --show-leak-kinds=all --track-origins=yes ./$SOURCE')

# run
run_binary = env.Command('run', binary, './$SOURCE')

# test
test_commands = [env.Command(f'run_{os.path.basename(str(p))}', p, './$SOURCE') for p in test_programs]
env.Alias('test', test_commands)
