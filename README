simple concurrency primitives

- pthreads (inspired by goroutines) for compute-heavy tasks
- cooperative async (inspired by the javascript event loop) for io-heavy tasks
- zig/go-like defer statement for cleanup

⠀⠀⠀⠀⠀⣀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⡀⠀⠀
⠀⠀⠀⠀⣰⣿⡆⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⣄⠀⢀⣴⣿⡇⠀⠀
⠀⢠⣄⠀⣿⣿⡿⠀⢀⡀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⣸⣿⠀⢸⣿⡿⠀⠀⠀
⠀⠈⣿⣆⠘⠟⢀⣼⣿⠁⠀⠀⠀⠀⢀⠀⠀⠀⠀⣠⡀⢹⣿⡇⠈⣁⣤⣶⠖⠀
⠀⣀⠙⢿⡆⢰⣿⡿⠃⠀⠀⠀⠀⣰⣿⡇⠀⠀⠀⣿⣧⠈⠏⢠⣾⠿⠿⠋⠀⠀
⠀⢻⣷⡀⠁⠈⢁⣤⣶⠁⣴⡄⢸⣿⣿⡇⠀⠀⠀⣿⣿⠂⣀⣠⣤⣤⡄⠀⠀⠀
⠀⠈⢿⣿⠀⣴⣿⡿⠃⠀⣿⣷⠀⠟⢁⣠⣶⠇⠀⠈⠁⢴⣿⡿⠟⠉⠀⠀⠀⠀
⠀⠀⠀⠙⠀⠛⠋⠁⠀⣦⠈⢿⠃⣰⣿⡿⠏⠀⠀⣾⠆⠀⠀⠀⠀⣴⣿⠀⠀⠀
⠀⠀⠀⠀⣿⠀⠀⠀⠀⣿⣷⡀⠀⠋⣁⣤⡤⠀⢰⡏⠀⢸⣆⠀⣾⣿⡿⠀⠀⠀
⠀⠀⠀⠀⣿⠀⠀⠀⠀⢻⣿⠃⣰⣿⣿⠟⠀⢀⡿⠀⠀⢿⣿⡄⠹⠛⢁⣤⡤⠀
⠀⠀⠀⠀⣿⠀⠀⠀⠀⠀⠈⡀⠛⠋⠁⠀⠀⣼⡇⢰⣆⠈⢿⠇⢠⣾⣿⠟⠀⠀
⠀⠀⠀⠀⣿⠀⠀⠀⠀⠀⢸⠃⠀⠀⠀⠀⢀⣿⠀⢸⣿⣆⠈⠀⠋⣉⣠⡄⠀⠀
⠀⠀⠀⠀⣿⠀⠀⠀⠀⠀⣿⠀⠀⠀⠀⠀⢸⡇⠀⠘⢿⡟⢀⣶⣿⡿⠋⠀⠀⠀
⠀⠀⠀⠀⢻⡆⠀⠀⠀⢸⡏⠀⠀⠀⠀⠀⣾⡇⠀⠀⢀⣀⠘⠛⠉⠀⠀⠀⠀⠀
⠀⠀⠀⠀⠘⠓⠀⠀⠀⠘⠃⠀⠀⠀⠀⠀⠛⠁⠀⠀⠘⠋⠀⠀⠀⠀⠀⠀⠀⠀

```
$ make run

IO-Bound GO: 100%|████████████████████████████████████████████████████████████| 200/200 [941.3it/s] downloads
IO-Bound ASYNC: 100%|████████████████████████████████████████████████████████████| 200/200 [0.0it/s] downloads   
Compute-Bound GO: 100%|████████████████████████████████████████████████████████████| 12/12 [109.5it/s] workers   
Compute-Bound ASYNC: 100%|████████████████████████████████████████████████████████████| 12/12 [0.0it/s] workers   
Memory-Bound GO: 100%|████████████████████████████████████████████████████████████| 32/32 [56.4it/s] workers   
Memory-Bound ASYNC: 100%|████████████████████████████████████████████████████████████| 32/32 [32000000.0it/s] workers   


IO-Bound:        GO in 0.235s vs ASYNC in 0.008s (28.0x faster ASYNC)
Compute-Bound:   GO in 0.115s vs ASYNC in 0.654s (5.7x faster GO)
Memory-Bound:    GO in 0.576s vs ASYNC in 4.581s (8.0x faster GO)
```
